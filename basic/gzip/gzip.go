package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io/ioutil"
)

var teststr = "0.06530693,0.037678227,0.047816373,0.0004983973,0,0.030493863,0.003996939,0.024684666,0.009055393,0.02166917,0.03586081,0.004109769,0.090823114,0.13073817,0,0.033465754,0.03944819,0.0200297,0.08625686,0.015768876,0.039224517,0.030378584,0.009105457,0.06833054,0.033514492,0.06729785,0.004477196,0.038876053,0.012466418,0.070080556,0.013862882,0.0634618,0.024316354,0.0265282,0.016457612,0,0.018719763,0.05580936,0.048397336,0.036854323,0.018692099,0.047834888,0.014806587,0.012770877,0.010226489,0.15496334,0.01665598,0.015907133,0.08402639,0.14709496,0.00648745,0.010311803,0.04671183,0,0,0.030101437,0.051728334,0.0040458455,0.020772796,0.008570364,0.07855196,0.01802796,0.0005988748,0.012033546,0.011997281,0.014981266,0.042413715,0.044351075,0.06648565,0.014085886,0.16115126,0.04321713,0.026401391,0.0027411003,0.011809362,0.026431384,0.017345648,0.014597837,0.024194555,0.011963301,0.060090527,0.03664957,0.046803907,0.0013991307,0.011603514,0.008454891,0.0093687335,0.023250004,0.043959655,0.003648066,0.027657287,0.0063105687,0.051891662,0,0.037800524,0,0.061293278,0.00999515,0.021010024,0.045877658,0.042001665,0.01786143,0.12794028,0.005237864,0.059446126,0.06722399,0.05862064,0,0.0026348084,0.018086325,0.015213108,0.010137495,0.031499818,0.03772424,0.000736526,0.020908745,0.005250599,0.09500461,0.02663357,0.029737988,0.003668179,0.04420736,0.0306624,0.046257544,0.0077838777,0.044466365,0.0041010864,0.018952534,0.02278303,0.014149724,0.013229114,0.06737005,0.03911355,0.07520272,0.025837352,0.017975973,0.083390765,0.007966299,0.042706806,0.03420122,0.033502467,0.0068668732,0.05668981,0.0008183829,0.032883156,0.020747539,0.013147985,0.041189298,0.0396244,0.034243096,0,0.040188324,0.025053853,0.04377995,0.027705127,0.023188867,0.048380047,0.018203601,0.0381446,0.0666847,0.02827857,0.048575003,0.020172285,0.03550324,0.058417313,0.00893574,0.029981544,0.05287608,0.046538483,0.061727144,0.01841326,0.05705357,0.069286324,0.041116968,0.030197164,0.009276583,0.0018750669,0.0028548185,0.024678158,0.030641502,0.017310536,0.01278668,0.030257234,0.06925646,0.021725861,0.027278328,0.005353635,0.012843353,0.012816227,0.1044131,0.02064907,0.027496029,0.021916175,0.030466642,0.036014706,0.11200472,0.0388331,0.011764154,0.050128773,0.021531444,0.035509158,0.0072988993,0.018802041,0.025756378,0.025614772,0.004552782,0.0060450914,0,0.0009380889,0.08023482,0.040900014,0.07217355,0.035158362,0.012798628,0.11232537,0.025511922,0.06132671,0,0.057272814,0.02070121,0.003251314,0.026143534,0.01053607,0.0073766774,0.002601945,0.0031495607,0.031651847,0.0538907,0.09364651,0.02019408,0.009831823,0.07171062,0.0075823767,0,0.09290488,0.03744272,0.01581894,0.024069328,0.045156766,0.050706733,0.005871736,0.010379452,0.018750526,0.032502007,0.008062231,0.03562811,0,0.034351718,0.015214549,0.0046425606,0.013502298,0.050484337,0.0764748,0.026730794,0.02439304,0.0761745,0.034114894,0.0342962,0.03080743,0.06770971,0.01513413,0.020800127,0.035406113,0.08964496,0.017585283,0.052478526,0.028798863,0.047541726,0.14774604,0,0.0077621546,0.03507414,0.024263749,0.013468663,0.069818445,0.014150043,0.018937554,0.031218443,0.054314535,0.04443907,0.050621618,0.05685734,0.035717502,0.020447014,0.035352312,0.007666955,0.23291759,0.01076996,0.09302617,0.022135232,0.052030716,0.0023942026,0.036254026,0.016975274,0.014816076,0.070962206,0.05256568,0.008803504,0.062677756,0.10852114,0.02945364,0.04198434,0.026608877,0.012364522,0.059109822,0.04113583,0.008990623,0.026734289,0.030397693,0.08741119,0.07051883,0.04075601,0.0520565,0.06815227,0.05777803,0.024023222,0.059246983,0.009428149,0.0035040104,0.012536328,0.027991796,0.0036164438,0.023041727,0.07567498,0.013709929,0.018434608,0.019158108,0.0048440336,0.002434348,0.0058584455,0.038113024,0.009337055,0.031221109,0.07328468,0.04326536,0.070409,0.00598619,0.0032385548,0.021007784,0.0072854534,0.0072880737,0.038434982,0,0.022594286,0.04738157,0.023245672,0.023347203,0.0136752585,0.031184519,0.03215115,0.0041019814,0.030277355,0.046039768,0.1400176,0.01112544,0.11232762,0.05301815,7.42171e-05,0.072493725,0.014646192,0.03149917,0.04283459,0.0049815304,0.060788523,0.05636194,0.07167482,0.019752555,0.046455577,0.025290698,0.032302413,0.06296515,0.048352078,0.040345944,0.036482245,0.06711432,0.05432804,0.047442097,0.03393297,0.015218225,0.013216837,0.056856666,0.06909814,0.05393394,0.023794122,0.012307502,0.011322721,0.038451,0.027277302,0.020290723,0.03625573,0.016034143,0.04389391,0.02049955,0.0013760324,0.019493915,0.025117606,0.0049218796,0.072046645,0.101638414,0.0632138,0,0.016437918,0.04996695,0.02251066,0.029305303,0.038312472,0.019653141,0.030085143,0.02862826,0.03832255,0.060945854,0,0.015672354,0.012746599,0.009023704,0.034207486,0,0.027945317,0,0.0376951,0.013473341,0.074872606,0.03052736,0.0075171636,0.016646922,0.006560104,0.04881357,0.15944037,0.019775482,0.010414718,0.031564526,0.042901956,0.015960073,0.04689466,0.03497484,0,0.043721657,0.017907958,0.02485175,0.04236201,0.02708429,0.023428544,0.01883226,0,0.03426679,0.0343939,0.17454383,0,0.0075679626,0.017910883,0.036490634,0.025425903,0.008529926,0.036273576,0.042208657,0.017076872,0.0076049156,0.013323152,0,0.0021678568,0.0027014753,0.010057148,0.08155458,0.060007926,0.029991116,0.047508113,0,0.009251887,0.057675507,0.030858373,0.00327366,0.05456253,0.03159731,0.043632895,0.012401215,0,0.037441578,0.037901234,0.009307005,0.018761124,0.034329474,0.014660435,0.02321259,0,0.054986175,0.003661751,0.04773788,0.04512739,0.008984881,0.0379872,0.079073064,0.018888192,0.019221054,0.04746105,0.048864167,0.043476503,0.025143694,0.03188975,0.08345616,0.009087759,0.02561387,0.014425554,0.07139476,0.015409998,0.030782497,0.0138829835,0.035125397,0.009651702,0.023893481,0.008665893,0.0232255,0.021094829"

func main() {
	str := compress(teststr)
	fmt.Println(len(str), str)

	strd := depress(str)
	fmt.Println(len(strd), strd)
}

func compress(str string) (strcompress string) {
	var b bytes.Buffer
	gz := gzip.NewWriter(&b)
	if _, err := gz.Write([]byte(str)); err != nil {
		return str
	}
	if err := gz.Flush(); err != nil {
		return str
	}
	if err := gz.Close(); err != nil {
		return str
	}
	strcompress = base64.StdEncoding.EncodeToString(b.Bytes())
	return
}

func depress(str string) string {
	data, _ := base64.StdEncoding.DecodeString(str)
	// fmt.Println(data, len(str))
	rdata := bytes.NewReader(data)
	r, _ := gzip.NewReader(rdata)
	s, _ := ioutil.ReadAll(r)
	// fmt.Println(len(s))
	return string(s)
}
